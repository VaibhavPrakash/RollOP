{"id":"5c91851e19811c61c1d0baec6a18d244","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n"},"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}\n"},"@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}\n"},"contracts/pythTest.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\nimport \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\";\n\ncontract PythTest {\n    IPyth pyth = IPyth(0xA2aa501b19aff244D90cc15a4Cf739D2725B5729);\n\n    function getPrice() public view returns (int64) {\n        PythStructs.Price memory currentQuotePrice = pyth.getPrice(\n            0xd45b6d47bf43faa700e6f6fec4f8989fcc80eabb2f2eff862d7258d60026d1b5\n        );\n        return currentQuotePrice.price;\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"ast":{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPyth.sol","exportedSymbols":{"IPyth":[118],"IPythEvents":[140],"PythStructs":[161]},"id":119,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:0"},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/PythStructs.sol","file":"./PythStructs.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":119,"sourceUnit":162,"src":"64:27:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol","file":"./IPythEvents.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":119,"sourceUnit":141,"src":"92:27:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"IPythEvents","nameLocations":["373:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"373:11:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"373:11:0"}],"canonicalName":"IPyth","contractDependencies":[],"contractKind":"interface","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"121:233:0","text":"@title Consume prices from the Pyth Network (https://pyth.network/).\n @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n @author Pyth Data Association"},"fullyImplemented":false,"id":118,"linearizedBaseContracts":[118,140],"name":"IPyth","nameLocation":"364:5:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"391:104:0","text":"@notice Returns the period (in seconds) that a price feed is considered valid since its publish time"},"functionSelector":"e18910a3","id":12,"implemented":false,"kind":"function","modifiers":[],"name":"getValidTimePeriod","nameLocation":"509:18:0","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[],"src":"527:2:0"},"returnParameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"validTimePeriod","nameLocation":"558:15:0","nodeType":"VariableDeclaration","scope":12,"src":"553:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint","nodeType":"ElementaryTypeName","src":"553:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"552:22:0"},"scope":118,"src":"500:75:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"581:364:0","text":"@notice Returns the price and confidence interval.\n @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"31d98b3f","id":21,"implemented":false,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"959:8:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"id","nameLocation":"985:2:0","nodeType":"VariableDeclaration","scope":21,"src":"977:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":14,"name":"bytes32","nodeType":"ElementaryTypeName","src":"977:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"967:26:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"price","nameLocation":"1042:5:0","nodeType":"VariableDeclaration","scope":21,"src":"1017:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":18,"nodeType":"UserDefinedTypeName","pathNode":{"id":17,"name":"PythStructs.Price","nameLocations":["1017:11:0","1029:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1017:17:0"},"referencedDeclaration":151,"src":"1017:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"1016:32:0"},"scope":118,"src":"950:99:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"1055:359:0","text":"@notice Returns the exponentially-weighted moving average price and confidence interval.\n @dev Reverts if the EMA price is not available.\n @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"b5dcc911","id":30,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPrice","nameLocation":"1428:11:0","nodeType":"FunctionDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"id","nameLocation":"1457:2:0","nodeType":"VariableDeclaration","scope":30,"src":"1449:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":23,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1439:26:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"price","nameLocation":"1514:5:0","nodeType":"VariableDeclaration","scope":30,"src":"1489:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"PythStructs.Price","nameLocations":["1489:11:0","1501:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1489:17:0"},"referencedDeclaration":151,"src":"1489:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"1488:32:0"},"scope":118,"src":"1419:102:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"1527:690:0","text":"@notice Returns the price of a price feed without any sanity checks.\n @dev This function returns the most recent price update in this contract without any recency checks.\n This function is unsafe as the returned price update may be arbitrarily far in the past.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"96834ad3","id":39,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceUnsafe","nameLocation":"2231:14:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"id","nameLocation":"2263:2:0","nodeType":"VariableDeclaration","scope":39,"src":"2255:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2255:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2245:26:0"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"price","nameLocation":"2320:5:0","nodeType":"VariableDeclaration","scope":39,"src":"2295:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":36,"nodeType":"UserDefinedTypeName","pathNode":{"id":35,"name":"PythStructs.Price","nameLocations":["2295:11:0","2307:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2295:17:0"},"referencedDeclaration":151,"src":"2295:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"2294:32:0"},"scope":118,"src":"2222:105:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"2333:423:0","text":"@notice Returns the price that is no older than `age` seconds of the current time.\n @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"a4ae35e0","id":50,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceNoOlderThan","nameLocation":"2770:19:0","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"id","nameLocation":"2807:2:0","nodeType":"VariableDeclaration","scope":50,"src":"2799:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":41,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2799:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"age","nameLocation":"2824:3:0","nodeType":"VariableDeclaration","scope":50,"src":"2819:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43,"name":"uint","nodeType":"ElementaryTypeName","src":"2819:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2789:44:0"},"returnParameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"price","nameLocation":"2882:5:0","nodeType":"VariableDeclaration","scope":50,"src":"2857:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":47,"nodeType":"UserDefinedTypeName","pathNode":{"id":46,"name":"PythStructs.Price","nameLocations":["2857:11:0","2869:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2857:17:0"},"referencedDeclaration":151,"src":"2857:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"2856:32:0"},"scope":118,"src":"2761:128:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"2895:925:0","text":"@notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n However, if the price is not recent this function returns the latest available price.\n The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n the returned price is recent or useful for any particular application.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"9474f45b","id":59,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPriceUnsafe","nameLocation":"3834:17:0","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"id","nameLocation":"3869:2:0","nodeType":"VariableDeclaration","scope":59,"src":"3861:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3861:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3851:26:0"},"returnParameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"price","nameLocation":"3926:5:0","nodeType":"VariableDeclaration","scope":59,"src":"3901:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":56,"nodeType":"UserDefinedTypeName","pathNode":{"id":55,"name":"PythStructs.Price","nameLocations":["3901:11:0","3913:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"3901:17:0"},"referencedDeclaration":151,"src":"3901:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"3900:32:0"},"scope":118,"src":"3825:108:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"3939:472:0","text":"@notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n of the current time.\n @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."},"functionSelector":"711a2e28","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getEmaPriceNoOlderThan","nameLocation":"4425:22:0","nodeType":"FunctionDefinition","parameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"id","nameLocation":"4465:2:0","nodeType":"VariableDeclaration","scope":70,"src":"4457:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":61,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4457:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":64,"mutability":"mutable","name":"age","nameLocation":"4482:3:0","nodeType":"VariableDeclaration","scope":70,"src":"4477:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint","nodeType":"ElementaryTypeName","src":"4477:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:44:0"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"price","nameLocation":"4540:5:0","nodeType":"VariableDeclaration","scope":70,"src":"4515:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":67,"nodeType":"UserDefinedTypeName","pathNode":{"id":66,"name":"PythStructs.Price","nameLocations":["4515:11:0","4527:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"4515:17:0"},"referencedDeclaration":151,"src":"4515:17:0","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"src":"4514:32:0"},"scope":118,"src":"4416:131:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"4553:535:0","text":"@notice Update price feeds with given update messages.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n Prices will be updated if they are more recent than the current stored prices.\n The call will succeed even if the update is not the most recent.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data."},"functionSelector":"ef9e5e28","id":77,"implemented":false,"kind":"function","modifiers":[],"name":"updatePriceFeeds","nameLocation":"5102:16:0","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"updateData","nameLocation":"5136:10:0","nodeType":"VariableDeclaration","scope":77,"src":"5119:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":72,"name":"bytes","nodeType":"ElementaryTypeName","src":"5119:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":73,"nodeType":"ArrayTypeName","src":"5119:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"5118:29:0"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[],"src":"5164:0:0"},"scope":118,"src":"5093:72:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"5171:1299:0","text":"@notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n Otherwise, it calls updatePriceFeeds method to update the prices.\n @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`"},"functionSelector":"b9256d28","id":90,"implemented":false,"kind":"function","modifiers":[],"name":"updatePriceFeedsIfNecessary","nameLocation":"6484:27:0","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"updateData","nameLocation":"6538:10:0","nodeType":"VariableDeclaration","scope":90,"src":"6521:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":79,"name":"bytes","nodeType":"ElementaryTypeName","src":"6521:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":80,"nodeType":"ArrayTypeName","src":"6521:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"priceIds","nameLocation":"6577:8:0","nodeType":"VariableDeclaration","scope":90,"src":"6558:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6558:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":83,"nodeType":"ArrayTypeName","src":"6558:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"publishTimes","nameLocation":"6613:12:0","nodeType":"VariableDeclaration","scope":90,"src":"6595:30:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_calldata_ptr","typeString":"uint64[]"},"typeName":{"baseType":{"id":85,"name":"uint64","nodeType":"ElementaryTypeName","src":"6595:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":86,"nodeType":"ArrayTypeName","src":"6595:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint64_$dyn_storage_ptr","typeString":"uint64[]"}},"visibility":"internal"}],"src":"6511:120:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"6648:0:0"},"scope":118,"src":"6475:174:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"6655:178:0","text":"@notice Returns the required fee to update an array of price updates.\n @param updateData Array of price update data.\n @return feeAmount The required fee in Wei."},"functionSelector":"d47eed45","id":99,"implemented":false,"kind":"function","modifiers":[],"name":"getUpdateFee","nameLocation":"6847:12:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"updateData","nameLocation":"6886:10:0","nodeType":"VariableDeclaration","scope":99,"src":"6869:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":92,"name":"bytes","nodeType":"ElementaryTypeName","src":"6869:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":93,"nodeType":"ArrayTypeName","src":"6869:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6859:43:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"feeAmount","nameLocation":"6931:9:0","nodeType":"VariableDeclaration","scope":99,"src":"6926:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint","nodeType":"ElementaryTypeName","src":"6926:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6925:16:0"},"scope":118,"src":"6838:104:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"6948:1154:0","text":"@notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n within `minPublishTime` and `maxPublishTime`.\n You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n no update for any of the given `priceIds` within the given time range.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order)."},"functionSelector":"4716e9c5","id":117,"implemented":false,"kind":"function","modifiers":[],"name":"parsePriceFeedUpdates","nameLocation":"8116:21:0","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"updateData","nameLocation":"8164:10:0","nodeType":"VariableDeclaration","scope":117,"src":"8147:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":101,"name":"bytes","nodeType":"ElementaryTypeName","src":"8147:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":102,"nodeType":"ArrayTypeName","src":"8147:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"priceIds","nameLocation":"8203:8:0","nodeType":"VariableDeclaration","scope":117,"src":"8184:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":104,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8184:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":105,"nodeType":"ArrayTypeName","src":"8184:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":108,"mutability":"mutable","name":"minPublishTime","nameLocation":"8228:14:0","nodeType":"VariableDeclaration","scope":117,"src":"8221:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":107,"name":"uint64","nodeType":"ElementaryTypeName","src":"8221:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":110,"mutability":"mutable","name":"maxPublishTime","nameLocation":"8259:14:0","nodeType":"VariableDeclaration","scope":117,"src":"8252:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"8252:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8137:142:0"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"priceFeeds","nameLocation":"8337:10:0","nodeType":"VariableDeclaration","scope":117,"src":"8306:41:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceFeed_$160_memory_ptr_$dyn_memory_ptr","typeString":"struct PythStructs.PriceFeed[]"},"typeName":{"baseType":{"id":113,"nodeType":"UserDefinedTypeName","pathNode":{"id":112,"name":"PythStructs.PriceFeed","nameLocations":["8306:11:0","8318:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":160,"src":"8306:21:0"},"referencedDeclaration":160,"src":"8306:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_PriceFeed_$160_storage_ptr","typeString":"struct PythStructs.PriceFeed"}},"id":114,"nodeType":"ArrayTypeName","src":"8306:23:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceFeed_$160_storage_$dyn_storage_ptr","typeString":"struct PythStructs.PriceFeed[]"}},"visibility":"internal"}],"src":"8305:43:0"},"scope":118,"src":"8107:242:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":119,"src":"354:7997:0","usedErrors":[]}],"src":"39:8313:0"},"id":0},"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"ast":{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol","exportedSymbols":{"IPythEvents":[140]},"id":141,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":120,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IPythEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"64:170:1","text":"@title IPythEvents contains the events that Pyth contract emits.\n @dev This interface can be used for listening to the updates for off-chain and testing purposes."},"fullyImplemented":true,"id":140,"linearizedBaseContracts":[140],"name":"IPythEvents","nameLocation":"244:11:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"262:305:1","text":"@dev Emitted when the price feed with `id` has received a fresh update.\n @param id The Pyth Price Feed ID.\n @param publishTime Publish time of the given price update.\n @param price Price of the given price update.\n @param conf Confidence interval of the given price update."},"eventSelector":"d06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec","id":132,"name":"PriceFeedUpdate","nameLocation":"578:15:1","nodeType":"EventDefinition","parameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"619:2:1","nodeType":"VariableDeclaration","scope":132,"src":"603:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"603:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":126,"indexed":false,"mutability":"mutable","name":"publishTime","nameLocation":"638:11:1","nodeType":"VariableDeclaration","scope":132,"src":"631:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":125,"name":"uint64","nodeType":"ElementaryTypeName","src":"631:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":128,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"665:5:1","nodeType":"VariableDeclaration","scope":132,"src":"659:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":127,"name":"int64","nodeType":"ElementaryTypeName","src":"659:5:1","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":130,"indexed":false,"mutability":"mutable","name":"conf","nameLocation":"687:4:1","nodeType":"VariableDeclaration","scope":132,"src":"680:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":129,"name":"uint64","nodeType":"ElementaryTypeName","src":"680:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"593:104:1"},"src":"572:126:1"},{"anonymous":false,"documentation":{"id":133,"nodeType":"StructuredDocumentation","src":"704:228:1","text":"@dev Emitted when a batch price update is processed successfully.\n @param chainId ID of the source chain that the batch price update comes from.\n @param sequenceNumber Sequence number of the batch price update."},"eventSelector":"943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b","id":139,"name":"BatchPriceFeedUpdate","nameLocation":"943:20:1","nodeType":"EventDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":135,"indexed":false,"mutability":"mutable","name":"chainId","nameLocation":"971:7:1","nodeType":"VariableDeclaration","scope":139,"src":"964:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":134,"name":"uint16","nodeType":"ElementaryTypeName","src":"964:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":137,"indexed":false,"mutability":"mutable","name":"sequenceNumber","nameLocation":"987:14:1","nodeType":"VariableDeclaration","scope":139,"src":"980:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":136,"name":"uint64","nodeType":"ElementaryTypeName","src":"980:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"963:39:1"},"src":"937:66:1"}],"scope":141,"src":"234:771:1","usedErrors":[]}],"src":"39:967:1"},"id":1},"@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"ast":{"absolutePath":"@pythnetwork/pyth-sdk-solidity/PythStructs.sol","exportedSymbols":{"PythStructs":[161]},"id":162,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":142,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"PythStructs","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":161,"linearizedBaseContracts":[161],"name":"PythStructs","nameLocation":"73:11:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PythStructs.Price","id":151,"members":[{"constant":false,"id":144,"mutability":"mutable","name":"price","nameLocation":"623:5:2","nodeType":"VariableDeclaration","scope":151,"src":"617:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":143,"name":"int64","nodeType":"ElementaryTypeName","src":"617:5:2","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"conf","nameLocation":"693:4:2","nodeType":"VariableDeclaration","scope":151,"src":"686:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":145,"name":"uint64","nodeType":"ElementaryTypeName","src":"686:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"expo","nameLocation":"739:4:2","nodeType":"VariableDeclaration","scope":151,"src":"733:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":147,"name":"int32","nodeType":"ElementaryTypeName","src":"733:5:2","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"},{"constant":false,"id":150,"mutability":"mutable","name":"publishTime","nameLocation":"824:11:2","nodeType":"VariableDeclaration","scope":151,"src":"819:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":149,"name":"uint","nodeType":"ElementaryTypeName","src":"819:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Price","nameLocation":"584:5:2","nodeType":"StructDefinition","scope":161,"src":"577:265:2","visibility":"public"},{"canonicalName":"PythStructs.PriceFeed","id":160,"members":[{"constant":false,"id":153,"mutability":"mutable","name":"id","nameLocation":"989:2:2","nodeType":"VariableDeclaration","scope":160,"src":"981:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"price","nameLocation":"1041:5:2","nodeType":"VariableDeclaration","scope":160,"src":"1035:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":155,"nodeType":"UserDefinedTypeName","pathNode":{"id":154,"name":"Price","nameLocations":["1035:5:2"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1035:5:2"},"referencedDeclaration":151,"src":"1035:5:2","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"emaPrice","nameLocation":"1134:8:2","nodeType":"VariableDeclaration","scope":160,"src":"1128:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":158,"nodeType":"UserDefinedTypeName","pathNode":{"id":157,"name":"Price","nameLocations":["1128:5:2"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1128:5:2"},"referencedDeclaration":151,"src":"1128:5:2","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"name":"PriceFeed","nameLocation":"936:9:2","nodeType":"StructDefinition","scope":161,"src":"929:220:2","visibility":"public"}],"scope":162,"src":"64:1087:2","usedErrors":[]}],"src":"39:1113:2"},"id":2},"contracts/pythTest.sol":{"ast":{"absolutePath":"contracts/pythTest.sol","exportedSymbols":{"IPyth":[118],"IPythEvents":[140],"PythStructs":[161],"PythTest":[191]},"id":192,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":163,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/IPyth.sol","file":"@pythnetwork/pyth-sdk-solidity/IPyth.sol","id":164,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":192,"sourceUnit":119,"src":"57:50:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@pythnetwork/pyth-sdk-solidity/PythStructs.sol","file":"@pythnetwork/pyth-sdk-solidity/PythStructs.sol","id":165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":192,"sourceUnit":162,"src":"108:56:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PythTest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":191,"linearizedBaseContracts":[191],"name":"PythTest","nameLocation":"175:8:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":171,"mutability":"mutable","name":"pyth","nameLocation":"196:4:3","nodeType":"VariableDeclaration","scope":191,"src":"190:62:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"},"typeName":{"id":167,"nodeType":"UserDefinedTypeName","pathNode":{"id":166,"name":"IPyth","nameLocations":["190:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":118,"src":"190:5:3"},"referencedDeclaration":118,"src":"190:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"value":{"arguments":[{"hexValue":"307841326161353031623139616666323434443930636331356134436637333944323732354235373239","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"209:42:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":168,"name":"IPyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"203:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPyth_$118_$","typeString":"type(contract IPyth)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"203:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"visibility":"internal"},{"body":{"id":189,"nodeType":"Block","src":"307:205:3","statements":[{"assignments":[180],"declarations":[{"constant":false,"id":180,"mutability":"mutable","name":"currentQuotePrice","nameLocation":"342:17:3","nodeType":"VariableDeclaration","scope":189,"src":"317:42:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price"},"typeName":{"id":179,"nodeType":"UserDefinedTypeName","pathNode":{"id":178,"name":"PythStructs.Price","nameLocations":["317:11:3","329:5:3"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"317:17:3"},"referencedDeclaration":151,"src":"317:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_storage_ptr","typeString":"struct PythStructs.Price"}},"visibility":"internal"}],"id":185,"initialValue":{"arguments":[{"hexValue":"307864343562366434376266343366616137303065366636666563346638393839666363383065616262326632656666383632643732353864363030323664316235","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"389:66:3","typeDescriptions":{"typeIdentifier":"t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1","typeString":"int_const 9605...(69 digits omitted)...6677"},"value":"0xd45b6d47bf43faa700e6f6fec4f8989fcc80eabb2f2eff862d7258d60026d1b5"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1","typeString":"int_const 9605...(69 digits omitted)...6677"}],"expression":{"id":181,"name":"pyth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"362:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_IPyth_$118","typeString":"contract IPyth"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"367:8:3","memberName":"getPrice","nodeType":"MemberAccess","referencedDeclaration":21,"src":"362:13:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Price_$151_memory_ptr_$","typeString":"function (bytes32) view external returns (struct PythStructs.Price memory)"}},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"362:103:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"nodeType":"VariableDeclarationStatement","src":"317:148:3"},{"expression":{"expression":{"id":186,"name":"currentQuotePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"482:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_Price_$151_memory_ptr","typeString":"struct PythStructs.Price memory"}},"id":187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"500:5:3","memberName":"price","nodeType":"MemberAccess","referencedDeclaration":144,"src":"482:23:3","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"functionReturnParameters":175,"id":188,"nodeType":"Return","src":"475:30:3"}]},"functionSelector":"98d5fdca","id":190,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"268:8:3","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[],"src":"276:2:3"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":190,"src":"300:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":173,"name":"int64","nodeType":"ElementaryTypeName","src":"300:5:3","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"299:7:3"},"scope":191,"src":"259:253:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":192,"src":"166:348:3","usedErrors":[]}],"src":"32:482:3"},"id":3}},"contracts":{"@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"IPyth":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getEmaPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getEmaPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPrice","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"name":"getPriceNoOlderThan","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getPriceUnsafe","outputs":[{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"getUpdateFee","outputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getValidTimePeriod","outputs":[{"internalType":"uint256","name":"validTimePeriod","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64","name":"minPublishTime","type":"uint64"},{"internalType":"uint64","name":"maxPublishTime","type":"uint64"}],"name":"parsePriceFeedUpdates","outputs":[{"components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"price","type":"tuple"},{"components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}],"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple"}],"internalType":"struct PythStructs.PriceFeed[]","name":"priceFeeds","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"name":"updatePriceFeeds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64[]","name":"publishTimes","type":"uint64[]"}],"name":"updatePriceFeedsIfNecessary","outputs":[],"stateMutability":"payable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getEmaPrice(bytes32)":"b5dcc911","getEmaPriceNoOlderThan(bytes32,uint256)":"711a2e28","getEmaPriceUnsafe(bytes32)":"9474f45b","getPrice(bytes32)":"31d98b3f","getPriceNoOlderThan(bytes32,uint256)":"a4ae35e0","getPriceUnsafe(bytes32)":"96834ad3","getUpdateFee(bytes[])":"d47eed45","getValidTimePeriod()":"e18910a3","parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":"4716e9c5","updatePriceFeeds(bytes[])":"ef9e5e28","updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":"b9256d28"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getEmaPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"minPublishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPublishTime\",\"type\":\"uint64\"}],\"name\":\"parsePriceFeedUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed[]\",\"name\":\"priceFeeds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"publishTimes\",\"type\":\"uint64[]\"}],\"name\":\"updatePriceFeedsIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pyth Data Association\",\"details\":\"Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\",\"kind\":\"dev\",\"methods\":{\"getEmaPrice(bytes32)\":{\"details\":\"Reverts if the EMA price is not available.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceUnsafe(bytes32)\":{\"details\":\"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPrice(bytes32)\":{\"details\":\"Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceUnsafe(bytes32)\":{\"details\":\"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getUpdateFee(bytes[])\":{\"params\":{\"updateData\":\"Array of price update data.\"},\"returns\":{\"feeAmount\":\"The required fee in Wei.\"}},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.\",\"params\":{\"maxPublishTime\":\"maximum acceptable publishTime for the given `priceIds`.\",\"minPublishTime\":\"minimum acceptable publishTime for the given `priceIds`.\",\"priceIds\":\"Array of price ids.\",\"updateData\":\"Array of price update data.\"},\"returns\":{\"priceFeeds\":\"Array of the price feeds corresponding to the given `priceIds` (with the same order).\"}},\"updatePriceFeeds(bytes[])\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"updateData\":\"Array of price update data.\"}},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"details\":\"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"priceIds\":\"Array of price ids.\",\"publishTimes\":\"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\",\"updateData\":\"Array of price update data.\"}}},\"title\":\"Consume prices from the Pyth Network (https://pyth.network/).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEmaPrice(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price and confidence interval.\"},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time.\"},\"getEmaPriceUnsafe(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\"},\"getPrice(bytes32)\":{\"notice\":\"Returns the price and confidence interval.\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the price that is no older than `age` seconds of the current time.\"},\"getPriceUnsafe(bytes32)\":{\"notice\":\"Returns the price of a price feed without any sanity checks.\"},\"getUpdateFee(bytes[])\":{\"notice\":\"Returns the required fee to update an array of price updates.\"},\"getValidTimePeriod()\":{\"notice\":\"Returns the period (in seconds) that a price feed is considered valid since its publish time\"},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"notice\":\"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array.\"},\"updatePriceFeeds(bytes[])\":{\"notice\":\"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent.\"},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"notice\":\"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":\"IPyth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4d7cb071e08e81bb8b113a928f4c2d2b3cdf950ad64c6c7003ea3d874163ca77\",\"dweb:/ipfs/QmRbQchPxRTBMHi7WzLb8XnMGzPDQcWhu7i2u5naUsCRoZ\"]},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]}},\"version\":1}"}},"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"IPythEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"chainId","type":"uint16"},{"indexed":false,"internalType":"uint64","name":"sequenceNumber","type":"uint64"}],"name":"BatchPriceFeedUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"publishTime","type":"uint64"},{"indexed":false,"internalType":"int64","name":"price","type":"int64"},{"indexed":false,"internalType":"uint64","name":"conf","type":"uint64"}],"name":"PriceFeedUpdate","type":"event"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This interface can be used for listening to the updates for off-chain and testing purposes.\",\"events\":{\"BatchPriceFeedUpdate(uint16,uint64)\":{\"details\":\"Emitted when a batch price update is processed successfully.\",\"params\":{\"chainId\":\"ID of the source chain that the batch price update comes from.\",\"sequenceNumber\":\"Sequence number of the batch price update.\"}},\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"IPythEvents contains the events that Pyth contract emits.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":\"IPythEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]}},\"version\":1}"}},"@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"PythStructs":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220c806d035ea580711cc7b568764832352357999033b999cd072a1a6f18266c71c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 MOD 0xD0 CALLDATALOAD 0xEA PC SMOD GT 0xCC PUSH28 0x568764832352357999033B999CD072A1A6F18266C71C64736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"64:1087:2:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220c806d035ea580711cc7b568764832352357999033b999cd072a1a6f18266c71c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 MOD 0xD0 CALLDATALOAD 0xEA PC SMOD GT 0xCC PUSH28 0x568764832352357999033B999CD072A1A6F18266C71C64736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"64:1087:2:-:0;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":\"PythStructs\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]}},\"version\":1}"}},"contracts/pythTest.sol":{"PythTest":{"abi":[{"inputs":[],"name":"getPrice","outputs":[{"internalType":"int64","name":"","type":"int64"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405273a2aa501b19aff244d90cc15a4cf739d2725b57296000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006457600080fd5b50610412806100746000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806398d5fdca14610030575b600080fd5b61003861004e565b6040516100459190610134565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331d98b3f7fd45b6d47bf43faa700e6f6fec4f8989fcc80eabb2f2eff862d7258d60026d1b56040518263ffffffff1660e01b81526004016100ca91906101a1565b608060405180830381865afa1580156100e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010b91906103af565b9050806000015191505090565b60008160070b9050919050565b61012e81610118565b82525050565b60006020820190506101496000830184610125565b92915050565b6000819050919050565b6000819050919050565b60008160001b9050919050565b600061018b6101866101818461014f565b610163565b610159565b9050919050565b61019b81610170565b82525050565b60006020820190506101b66000830184610192565b92915050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610219826101d0565b810181811067ffffffffffffffff82111715610238576102376101e1565b5b80604052505050565b600061024b6101bc565b90506102578282610210565b919050565b61026581610118565b811461027057600080fd5b50565b6000815190506102828161025c565b92915050565b600067ffffffffffffffff82169050919050565b6102a581610288565b81146102b057600080fd5b50565b6000815190506102c28161029c565b92915050565b60008160030b9050919050565b6102de816102c8565b81146102e957600080fd5b50565b6000815190506102fb816102d5565b92915050565b6000819050919050565b61031481610301565b811461031f57600080fd5b50565b6000815190506103318161030b565b92915050565b60006080828403121561034d5761034c6101cb565b5b6103576080610241565b9050600061036784828501610273565b600083015250602061037b848285016102b3565b602083015250604061038f848285016102ec565b60408301525060606103a384828501610322565b60608301525092915050565b6000608082840312156103c5576103c46101c6565b5b60006103d384828501610337565b9150509291505056fea2646970667358221220f048de8a4669d3a467980ecc16248e609e2c5f3bf6d140e7c769c906e422282764736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xA2AA501B19AFF244D90CC15A4CF739D2725B5729 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x412 DUP1 PUSH2 0x74 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x31D98B3F PUSH32 0xD45B6D47BF43FAA700E6F6FEC4F8989FCC80EABB2F2EFF862D7258D60026D1B5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10B SWAP2 SWAP1 PUSH2 0x3AF JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x7 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12E DUP2 PUSH2 0x118 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x149 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x125 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B PUSH2 0x186 PUSH2 0x181 DUP5 PUSH2 0x14F JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST PUSH2 0x159 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19B DUP2 PUSH2 0x170 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x219 DUP3 PUSH2 0x1D0 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x238 JUMPI PUSH2 0x237 PUSH2 0x1E1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24B PUSH2 0x1BC JUMP JUMPDEST SWAP1 POP PUSH2 0x257 DUP3 DUP3 PUSH2 0x210 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x265 DUP2 PUSH2 0x118 JUMP JUMPDEST DUP2 EQ PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x282 DUP2 PUSH2 0x25C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A5 DUP2 PUSH2 0x288 JUMP JUMPDEST DUP2 EQ PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2C2 DUP2 PUSH2 0x29C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DE DUP2 PUSH2 0x2C8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2FB DUP2 PUSH2 0x2D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x314 DUP2 PUSH2 0x301 JUMP JUMPDEST DUP2 EQ PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x331 DUP2 PUSH2 0x30B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34D JUMPI PUSH2 0x34C PUSH2 0x1CB JUMP JUMPDEST JUMPDEST PUSH2 0x357 PUSH1 0x80 PUSH2 0x241 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x367 DUP5 DUP3 DUP6 ADD PUSH2 0x273 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x37B DUP5 DUP3 DUP6 ADD PUSH2 0x2B3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x38F DUP5 DUP3 DUP6 ADD PUSH2 0x2EC JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3A3 DUP5 DUP3 DUP6 ADD PUSH2 0x322 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C5 JUMPI PUSH2 0x3C4 PUSH2 0x1C6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D3 DUP5 DUP3 DUP6 ADD PUSH2 0x337 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE BASEFEE 0xDE DUP11 CHAINID PUSH10 0xD3A467980ECC16248E60 SWAP15 0x2C 0x5F EXTCODESIZE 0xF6 0xD1 BLOCKHASH 0xE7 0xC7 PUSH10 0xC906E422282764736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"166:348:3:-:0;;;209:42;190:62;;;;;;;;;;;;;;;;;;;;166:348;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@getPrice_190":{"entryPoint":78,"id":190,"parameterSlots":0,"returnSlots":1},"abi_decode_t_int32_fromMemory":{"entryPoint":748,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_int64_fromMemory":{"entryPoint":627,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_Price_$151_memory_ptr_fromMemory":{"entryPoint":823,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":802,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Price_$151_memory_ptr_fromMemory":{"entryPoint":943,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_int64_to_t_int64_fromStack":{"entryPoint":293,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32_fromStack":{"entryPoint":402,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_int64__to_t_int64__fromStack_reversed":{"entryPoint":308,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1__to_t_bytes32__fromStack_reversed":{"entryPoint":417,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":577,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":444,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":345,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_int32":{"entryPoint":712,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_int64":{"entryPoint":280,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1":{"entryPoint":335,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":769,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":648,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32":{"entryPoint":368,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":528,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":481,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":459,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":454,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":464,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_0":{"entryPoint":355,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_int32":{"entryPoint":725,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_int64":{"entryPoint":604,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":779,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":668,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5861:4","statements":[{"body":{"nodeType":"YulBlock","src":"50:47:4","statements":[{"nodeType":"YulAssignment","src":"60:31:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"82:1:4","type":"","value":"7"},{"name":"value","nodeType":"YulIdentifier","src":"85:5:4"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"71:10:4"},"nodeType":"YulFunctionCall","src":"71:20:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"60:7:4"}]}]},"name":"cleanup_t_int64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"42:7:4","type":""}],"src":"7:90:4"},{"body":{"nodeType":"YulBlock","src":"164:51:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"181:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"202:5:4"}],"functionName":{"name":"cleanup_t_int64","nodeType":"YulIdentifier","src":"186:15:4"},"nodeType":"YulFunctionCall","src":"186:22:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"174:6:4"},"nodeType":"YulFunctionCall","src":"174:35:4"},"nodeType":"YulExpressionStatement","src":"174:35:4"}]},"name":"abi_encode_t_int64_to_t_int64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"152:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"159:3:4","type":""}],"src":"103:112:4"},{"body":{"nodeType":"YulBlock","src":"315:120:4","statements":[{"nodeType":"YulAssignment","src":"325:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"337:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"348:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"333:3:4"},"nodeType":"YulFunctionCall","src":"333:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"325:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"401:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"414:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"425:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"410:3:4"},"nodeType":"YulFunctionCall","src":"410:17:4"}],"functionName":{"name":"abi_encode_t_int64_to_t_int64_fromStack","nodeType":"YulIdentifier","src":"361:39:4"},"nodeType":"YulFunctionCall","src":"361:67:4"},"nodeType":"YulExpressionStatement","src":"361:67:4"}]},"name":"abi_encode_tuple_t_int64__to_t_int64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"287:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"299:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"310:4:4","type":""}],"src":"221:214:4"},{"body":{"nodeType":"YulBlock","src":"570:32:4","statements":[{"nodeType":"YulAssignment","src":"580:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"591:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"580:7:4"}]}]},"name":"cleanup_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"552:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"562:7:4","type":""}],"src":"441:161:4"},{"body":{"nodeType":"YulBlock","src":"653:32:4","statements":[{"nodeType":"YulAssignment","src":"663:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"674:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"663:7:4"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"635:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"645:7:4","type":""}],"src":"608:77:4"},{"body":{"nodeType":"YulBlock","src":"732:51:4","statements":[{"nodeType":"YulAssignment","src":"742:34:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"767:1:4","type":"","value":"0"},{"name":"value","nodeType":"YulIdentifier","src":"770:5:4"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"763:3:4"},"nodeType":"YulFunctionCall","src":"763:13:4"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"742:8:4"}]}]},"name":"shift_left_0","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"713:5:4","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"723:8:4","type":""}],"src":"691:92:4"},{"body":{"nodeType":"YulBlock","src":"933:170:4","statements":[{"nodeType":"YulAssignment","src":"943:154:4","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1089:5:4"}],"functionName":{"name":"cleanup_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1","nodeType":"YulIdentifier","src":"987:101:4"},"nodeType":"YulFunctionCall","src":"987:108:4"}],"functionName":{"name":"shift_left_0","nodeType":"YulIdentifier","src":"974:12:4"},"nodeType":"YulFunctionCall","src":"974:122:4"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"956:17:4"},"nodeType":"YulFunctionCall","src":"956:141:4"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"943:9:4"}]}]},"name":"convert_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"913:5:4","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"923:9:4","type":""}],"src":"789:314:4"},{"body":{"nodeType":"YulBlock","src":"1258:150:4","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1275:3:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1395:5:4"}],"functionName":{"name":"convert_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32","nodeType":"YulIdentifier","src":"1280:114:4"},"nodeType":"YulFunctionCall","src":"1280:121:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1268:6:4"},"nodeType":"YulFunctionCall","src":"1268:134:4"},"nodeType":"YulExpressionStatement","src":"1268:134:4"}]},"name":"abi_encode_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1246:5:4","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1253:3:4","type":""}],"src":"1109:299:4"},{"body":{"nodeType":"YulBlock","src":"1596:208:4","statements":[{"nodeType":"YulAssignment","src":"1606:26:4","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1618:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"1629:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1614:3:4"},"nodeType":"YulFunctionCall","src":"1614:18:4"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1606:4:4"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1770:6:4"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1783:9:4"},{"kind":"number","nodeType":"YulLiteral","src":"1794:1:4","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1779:3:4"},"nodeType":"YulFunctionCall","src":"1779:17:4"}],"functionName":{"name":"abi_encode_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1642:127:4"},"nodeType":"YulFunctionCall","src":"1642:155:4"},"nodeType":"YulExpressionStatement","src":"1642:155:4"}]},"name":"abi_encode_tuple_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1568:9:4","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1580:6:4","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1591:4:4","type":""}],"src":"1414:390:4"},{"body":{"nodeType":"YulBlock","src":"1850:35:4","statements":[{"nodeType":"YulAssignment","src":"1860:19:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1876:2:4","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1870:5:4"},"nodeType":"YulFunctionCall","src":"1870:9:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1860:6:4"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1843:6:4","type":""}],"src":"1810:75:4"},{"body":{"nodeType":"YulBlock","src":"1980:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1997:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2000:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1990:6:4"},"nodeType":"YulFunctionCall","src":"1990:12:4"},"nodeType":"YulExpressionStatement","src":"1990:12:4"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1891:117:4"},{"body":{"nodeType":"YulBlock","src":"2103:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2120:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2123:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2113:6:4"},"nodeType":"YulFunctionCall","src":"2113:12:4"},"nodeType":"YulExpressionStatement","src":"2113:12:4"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2014:117:4"},{"body":{"nodeType":"YulBlock","src":"2226:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2243:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2246:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2236:6:4"},"nodeType":"YulFunctionCall","src":"2236:12:4"},"nodeType":"YulExpressionStatement","src":"2236:12:4"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"2137:117:4"},{"body":{"nodeType":"YulBlock","src":"2308:54:4","statements":[{"nodeType":"YulAssignment","src":"2318:38:4","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2336:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"2343:2:4","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2332:3:4"},"nodeType":"YulFunctionCall","src":"2332:14:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2352:2:4","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2348:3:4"},"nodeType":"YulFunctionCall","src":"2348:7:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2328:3:4"},"nodeType":"YulFunctionCall","src":"2328:28:4"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2318:6:4"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2291:5:4","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2301:6:4","type":""}],"src":"2260:102:4"},{"body":{"nodeType":"YulBlock","src":"2396:152:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2413:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2416:77:4","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2406:6:4"},"nodeType":"YulFunctionCall","src":"2406:88:4"},"nodeType":"YulExpressionStatement","src":"2406:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:1:4","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2513:4:4","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2503:6:4"},"nodeType":"YulFunctionCall","src":"2503:15:4"},"nodeType":"YulExpressionStatement","src":"2503:15:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2534:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2537:4:4","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2527:6:4"},"nodeType":"YulFunctionCall","src":"2527:15:4"},"nodeType":"YulExpressionStatement","src":"2527:15:4"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2368:180:4"},{"body":{"nodeType":"YulBlock","src":"2597:238:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2607:58:4","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2629:6:4"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2659:4:4"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2637:21:4"},"nodeType":"YulFunctionCall","src":"2637:27:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2625:3:4"},"nodeType":"YulFunctionCall","src":"2625:40:4"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2611:10:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"2776:22:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2778:16:4"},"nodeType":"YulFunctionCall","src":"2778:18:4"},"nodeType":"YulExpressionStatement","src":"2778:18:4"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2719:10:4"},{"kind":"number","nodeType":"YulLiteral","src":"2731:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2716:2:4"},"nodeType":"YulFunctionCall","src":"2716:34:4"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2755:10:4"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2767:6:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2752:2:4"},"nodeType":"YulFunctionCall","src":"2752:22:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2713:2:4"},"nodeType":"YulFunctionCall","src":"2713:62:4"},"nodeType":"YulIf","src":"2710:88:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2814:2:4","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2818:10:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2807:6:4"},"nodeType":"YulFunctionCall","src":"2807:22:4"},"nodeType":"YulExpressionStatement","src":"2807:22:4"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2583:6:4","type":""},{"name":"size","nodeType":"YulTypedName","src":"2591:4:4","type":""}],"src":"2554:281:4"},{"body":{"nodeType":"YulBlock","src":"2882:88:4","statements":[{"nodeType":"YulAssignment","src":"2892:30:4","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"2902:18:4"},"nodeType":"YulFunctionCall","src":"2902:20:4"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2892:6:4"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2951:6:4"},{"name":"size","nodeType":"YulIdentifier","src":"2959:4:4"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2931:19:4"},"nodeType":"YulFunctionCall","src":"2931:33:4"},"nodeType":"YulExpressionStatement","src":"2931:33:4"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2866:4:4","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2875:6:4","type":""}],"src":"2841:129:4"},{"body":{"nodeType":"YulBlock","src":"3065:28:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3082:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3085:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3075:6:4"},"nodeType":"YulFunctionCall","src":"3075:12:4"},"nodeType":"YulExpressionStatement","src":"3075:12:4"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2976:117:4"},{"body":{"nodeType":"YulBlock","src":"3140:77:4","statements":[{"body":{"nodeType":"YulBlock","src":"3195:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3204:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3207:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3197:6:4"},"nodeType":"YulFunctionCall","src":"3197:12:4"},"nodeType":"YulExpressionStatement","src":"3197:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3163:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3186:5:4"}],"functionName":{"name":"cleanup_t_int64","nodeType":"YulIdentifier","src":"3170:15:4"},"nodeType":"YulFunctionCall","src":"3170:22:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3160:2:4"},"nodeType":"YulFunctionCall","src":"3160:33:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3153:6:4"},"nodeType":"YulFunctionCall","src":"3153:41:4"},"nodeType":"YulIf","src":"3150:61:4"}]},"name":"validator_revert_t_int64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3133:5:4","type":""}],"src":"3099:118:4"},{"body":{"nodeType":"YulBlock","src":"3284:78:4","statements":[{"nodeType":"YulAssignment","src":"3294:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3309:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3303:5:4"},"nodeType":"YulFunctionCall","src":"3303:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3294:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3350:5:4"}],"functionName":{"name":"validator_revert_t_int64","nodeType":"YulIdentifier","src":"3325:24:4"},"nodeType":"YulFunctionCall","src":"3325:31:4"},"nodeType":"YulExpressionStatement","src":"3325:31:4"}]},"name":"abi_decode_t_int64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3262:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"3270:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3278:5:4","type":""}],"src":"3223:139:4"},{"body":{"nodeType":"YulBlock","src":"3412:57:4","statements":[{"nodeType":"YulAssignment","src":"3422:41:4","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3437:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"3444:18:4","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3433:3:4"},"nodeType":"YulFunctionCall","src":"3433:30:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3422:7:4"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3394:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3404:7:4","type":""}],"src":"3368:101:4"},{"body":{"nodeType":"YulBlock","src":"3517:78:4","statements":[{"body":{"nodeType":"YulBlock","src":"3573:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3582:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3585:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3575:6:4"},"nodeType":"YulFunctionCall","src":"3575:12:4"},"nodeType":"YulExpressionStatement","src":"3575:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3540:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3564:5:4"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3547:16:4"},"nodeType":"YulFunctionCall","src":"3547:23:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3537:2:4"},"nodeType":"YulFunctionCall","src":"3537:34:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3530:6:4"},"nodeType":"YulFunctionCall","src":"3530:42:4"},"nodeType":"YulIf","src":"3527:62:4"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3510:5:4","type":""}],"src":"3475:120:4"},{"body":{"nodeType":"YulBlock","src":"3663:79:4","statements":[{"nodeType":"YulAssignment","src":"3673:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3688:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3682:5:4"},"nodeType":"YulFunctionCall","src":"3682:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3673:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3730:5:4"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"3704:25:4"},"nodeType":"YulFunctionCall","src":"3704:32:4"},"nodeType":"YulExpressionStatement","src":"3704:32:4"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3641:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"3649:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3657:5:4","type":""}],"src":"3601:141:4"},{"body":{"nodeType":"YulBlock","src":"3791:47:4","statements":[{"nodeType":"YulAssignment","src":"3801:31:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3823:1:4","type":"","value":"3"},{"name":"value","nodeType":"YulIdentifier","src":"3826:5:4"}],"functionName":{"name":"signextend","nodeType":"YulIdentifier","src":"3812:10:4"},"nodeType":"YulFunctionCall","src":"3812:20:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3801:7:4"}]}]},"name":"cleanup_t_int32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3773:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3783:7:4","type":""}],"src":"3748:90:4"},{"body":{"nodeType":"YulBlock","src":"3885:77:4","statements":[{"body":{"nodeType":"YulBlock","src":"3940:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3949:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3952:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3942:6:4"},"nodeType":"YulFunctionCall","src":"3942:12:4"},"nodeType":"YulExpressionStatement","src":"3942:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3908:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3931:5:4"}],"functionName":{"name":"cleanup_t_int32","nodeType":"YulIdentifier","src":"3915:15:4"},"nodeType":"YulFunctionCall","src":"3915:22:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3905:2:4"},"nodeType":"YulFunctionCall","src":"3905:33:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3898:6:4"},"nodeType":"YulFunctionCall","src":"3898:41:4"},"nodeType":"YulIf","src":"3895:61:4"}]},"name":"validator_revert_t_int32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3878:5:4","type":""}],"src":"3844:118:4"},{"body":{"nodeType":"YulBlock","src":"4029:78:4","statements":[{"nodeType":"YulAssignment","src":"4039:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4054:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4048:5:4"},"nodeType":"YulFunctionCall","src":"4048:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4039:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4095:5:4"}],"functionName":{"name":"validator_revert_t_int32","nodeType":"YulIdentifier","src":"4070:24:4"},"nodeType":"YulFunctionCall","src":"4070:31:4"},"nodeType":"YulExpressionStatement","src":"4070:31:4"}]},"name":"abi_decode_t_int32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4007:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"4015:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4023:5:4","type":""}],"src":"3968:139:4"},{"body":{"nodeType":"YulBlock","src":"4158:32:4","statements":[{"nodeType":"YulAssignment","src":"4168:16:4","value":{"name":"value","nodeType":"YulIdentifier","src":"4179:5:4"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4168:7:4"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4140:5:4","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4150:7:4","type":""}],"src":"4113:77:4"},{"body":{"nodeType":"YulBlock","src":"4239:79:4","statements":[{"body":{"nodeType":"YulBlock","src":"4296:16:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4305:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4308:1:4","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4298:6:4"},"nodeType":"YulFunctionCall","src":"4298:12:4"},"nodeType":"YulExpressionStatement","src":"4298:12:4"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4262:5:4"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4287:5:4"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4269:17:4"},"nodeType":"YulFunctionCall","src":"4269:24:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4259:2:4"},"nodeType":"YulFunctionCall","src":"4259:35:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4252:6:4"},"nodeType":"YulFunctionCall","src":"4252:43:4"},"nodeType":"YulIf","src":"4249:63:4"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4232:5:4","type":""}],"src":"4196:122:4"},{"body":{"nodeType":"YulBlock","src":"4387:80:4","statements":[{"nodeType":"YulAssignment","src":"4397:22:4","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4412:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4406:5:4"},"nodeType":"YulFunctionCall","src":"4406:13:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4397:5:4"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4455:5:4"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"4428:26:4"},"nodeType":"YulFunctionCall","src":"4428:33:4"},"nodeType":"YulExpressionStatement","src":"4428:33:4"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4365:6:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"4373:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4381:5:4","type":""}],"src":"4324:143:4"},{"body":{"nodeType":"YulBlock","src":"4593:863:4","statements":[{"body":{"nodeType":"YulBlock","src":"4637:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"4639:77:4"},"nodeType":"YulFunctionCall","src":"4639:79:4"},"nodeType":"YulExpressionStatement","src":"4639:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"4614:3:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"4619:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4610:3:4"},"nodeType":"YulFunctionCall","src":"4610:19:4"},{"kind":"number","nodeType":"YulLiteral","src":"4631:4:4","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4606:3:4"},"nodeType":"YulFunctionCall","src":"4606:30:4"},"nodeType":"YulIf","src":"4603:117:4"},{"nodeType":"YulAssignment","src":"4729:30:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4754:4:4","type":"","value":"0x80"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4738:15:4"},"nodeType":"YulFunctionCall","src":"4738:21:4"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4729:5:4"}]},{"nodeType":"YulBlock","src":"4769:160:4","statements":[{"nodeType":"YulVariableDeclaration","src":"4805:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"4819:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4809:6:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4845:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"4852:4:4","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4841:3:4"},"nodeType":"YulFunctionCall","src":"4841:16:4"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4893:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"4904:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4889:3:4"},"nodeType":"YulFunctionCall","src":"4889:22:4"},{"name":"end","nodeType":"YulIdentifier","src":"4913:3:4"}],"functionName":{"name":"abi_decode_t_int64_fromMemory","nodeType":"YulIdentifier","src":"4859:29:4"},"nodeType":"YulFunctionCall","src":"4859:58:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4834:6:4"},"nodeType":"YulFunctionCall","src":"4834:84:4"},"nodeType":"YulExpressionStatement","src":"4834:84:4"}]},{"nodeType":"YulBlock","src":"4939:161:4","statements":[{"nodeType":"YulVariableDeclaration","src":"4974:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"4988:2:4","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4978:6:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5015:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"5022:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5011:3:4"},"nodeType":"YulFunctionCall","src":"5011:16:4"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5064:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"5075:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5060:3:4"},"nodeType":"YulFunctionCall","src":"5060:22:4"},{"name":"end","nodeType":"YulIdentifier","src":"5084:3:4"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"5029:30:4"},"nodeType":"YulFunctionCall","src":"5029:59:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5004:6:4"},"nodeType":"YulFunctionCall","src":"5004:85:4"},"nodeType":"YulExpressionStatement","src":"5004:85:4"}]},{"nodeType":"YulBlock","src":"5110:160:4","statements":[{"nodeType":"YulVariableDeclaration","src":"5145:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"5159:2:4","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5149:6:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5186:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"5193:4:4","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5182:3:4"},"nodeType":"YulFunctionCall","src":"5182:16:4"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5234:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"5245:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5230:3:4"},"nodeType":"YulFunctionCall","src":"5230:22:4"},{"name":"end","nodeType":"YulIdentifier","src":"5254:3:4"}],"functionName":{"name":"abi_decode_t_int32_fromMemory","nodeType":"YulIdentifier","src":"5200:29:4"},"nodeType":"YulFunctionCall","src":"5200:58:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5175:6:4"},"nodeType":"YulFunctionCall","src":"5175:84:4"},"nodeType":"YulExpressionStatement","src":"5175:84:4"}]},{"nodeType":"YulBlock","src":"5280:169:4","statements":[{"nodeType":"YulVariableDeclaration","src":"5322:16:4","value":{"kind":"number","nodeType":"YulLiteral","src":"5336:2:4","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5326:6:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5363:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"5370:4:4","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5359:3:4"},"nodeType":"YulFunctionCall","src":"5359:16:4"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5413:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"5424:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5409:3:4"},"nodeType":"YulFunctionCall","src":"5409:22:4"},{"name":"end","nodeType":"YulIdentifier","src":"5433:3:4"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"5377:31:4"},"nodeType":"YulFunctionCall","src":"5377:60:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5352:6:4"},"nodeType":"YulFunctionCall","src":"5352:86:4"},"nodeType":"YulExpressionStatement","src":"5352:86:4"}]}]},"name":"abi_decode_t_struct$_Price_$151_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4568:9:4","type":""},{"name":"end","nodeType":"YulTypedName","src":"4579:3:4","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4587:5:4","type":""}],"src":"4505:951:4"},{"body":{"nodeType":"YulBlock","src":"5561:297:4","statements":[{"body":{"nodeType":"YulBlock","src":"5608:83:4","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5610:77:4"},"nodeType":"YulFunctionCall","src":"5610:79:4"},"nodeType":"YulExpressionStatement","src":"5610:79:4"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5582:7:4"},{"name":"headStart","nodeType":"YulIdentifier","src":"5591:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5578:3:4"},"nodeType":"YulFunctionCall","src":"5578:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"5603:3:4","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5574:3:4"},"nodeType":"YulFunctionCall","src":"5574:33:4"},"nodeType":"YulIf","src":"5571:120:4"},{"nodeType":"YulBlock","src":"5701:150:4","statements":[{"nodeType":"YulVariableDeclaration","src":"5716:15:4","value":{"kind":"number","nodeType":"YulLiteral","src":"5730:1:4","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5720:6:4","type":""}]},{"nodeType":"YulAssignment","src":"5745:96:4","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5813:9:4"},{"name":"offset","nodeType":"YulIdentifier","src":"5824:6:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5809:3:4"},"nodeType":"YulFunctionCall","src":"5809:22:4"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5833:7:4"}],"functionName":{"name":"abi_decode_t_struct$_Price_$151_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"5755:53:4"},"nodeType":"YulFunctionCall","src":"5755:86:4"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5745:6:4"}]}]}]},"name":"abi_decode_tuple_t_struct$_Price_$151_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5531:9:4","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5542:7:4","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5554:6:4","type":""}],"src":"5462:396:4"}]},"contents":"{\n\n    function cleanup_t_int64(value) -> cleaned {\n        cleaned := signextend(7, value)\n    }\n\n    function abi_encode_t_int64_to_t_int64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_int64(value))\n    }\n\n    function abi_encode_tuple_t_int64__to_t_int64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_int64_to_t_int64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function shift_left_0(value) -> newValue {\n        newValue :=\n\n        shl(0, value)\n\n    }\n\n    function convert_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32(value) -> converted {\n        converted := cleanup_t_bytes32(shift_left_0(cleanup_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1(value)))\n    }\n\n    function abi_encode_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_96051861207197933541123787295560332379251726497997733014150280580884674826677_by_1_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_int64(value) {\n        if iszero(eq(value, cleanup_t_int64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int64(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_int32(value) -> cleaned {\n        cleaned := signextend(3, value)\n    }\n\n    function validator_revert_t_int32(value) {\n        if iszero(eq(value, cleanup_t_int32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int32(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    // struct PythStructs.Price\n    function abi_decode_t_struct$_Price_$151_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x80) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x80)\n\n        {\n            // price\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_int64_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // conf\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint64_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // expo\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_int32_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // publishTime\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_Price_$151_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_Price_$151_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":4,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c806398d5fdca14610030575b600080fd5b61003861004e565b6040516100459190610134565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331d98b3f7fd45b6d47bf43faa700e6f6fec4f8989fcc80eabb2f2eff862d7258d60026d1b56040518263ffffffff1660e01b81526004016100ca91906101a1565b608060405180830381865afa1580156100e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010b91906103af565b9050806000015191505090565b60008160070b9050919050565b61012e81610118565b82525050565b60006020820190506101496000830184610125565b92915050565b6000819050919050565b6000819050919050565b60008160001b9050919050565b600061018b6101866101818461014f565b610163565b610159565b9050919050565b61019b81610170565b82525050565b60006020820190506101b66000830184610192565b92915050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610219826101d0565b810181811067ffffffffffffffff82111715610238576102376101e1565b5b80604052505050565b600061024b6101bc565b90506102578282610210565b919050565b61026581610118565b811461027057600080fd5b50565b6000815190506102828161025c565b92915050565b600067ffffffffffffffff82169050919050565b6102a581610288565b81146102b057600080fd5b50565b6000815190506102c28161029c565b92915050565b60008160030b9050919050565b6102de816102c8565b81146102e957600080fd5b50565b6000815190506102fb816102d5565b92915050565b6000819050919050565b61031481610301565b811461031f57600080fd5b50565b6000815190506103318161030b565b92915050565b60006080828403121561034d5761034c6101cb565b5b6103576080610241565b9050600061036784828501610273565b600083015250602061037b848285016102b3565b602083015250604061038f848285016102ec565b60408301525060606103a384828501610322565b60608301525092915050565b6000608082840312156103c5576103c46101c6565b5b60006103d384828501610337565b9150509291505056fea2646970667358221220f048de8a4669d3a467980ecc16248e609e2c5f3bf6d140e7c769c906e422282764736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x31D98B3F PUSH32 0xD45B6D47BF43FAA700E6F6FEC4F8989FCC80EABB2F2EFF862D7258D60026D1B5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10B SWAP2 SWAP1 PUSH2 0x3AF JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x7 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12E DUP2 PUSH2 0x118 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x149 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x125 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B PUSH2 0x186 PUSH2 0x181 DUP5 PUSH2 0x14F JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST PUSH2 0x159 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19B DUP2 PUSH2 0x170 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x219 DUP3 PUSH2 0x1D0 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x238 JUMPI PUSH2 0x237 PUSH2 0x1E1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24B PUSH2 0x1BC JUMP JUMPDEST SWAP1 POP PUSH2 0x257 DUP3 DUP3 PUSH2 0x210 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x265 DUP2 PUSH2 0x118 JUMP JUMPDEST DUP2 EQ PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x282 DUP2 PUSH2 0x25C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A5 DUP2 PUSH2 0x288 JUMP JUMPDEST DUP2 EQ PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2C2 DUP2 PUSH2 0x29C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DE DUP2 PUSH2 0x2C8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2FB DUP2 PUSH2 0x2D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x314 DUP2 PUSH2 0x301 JUMP JUMPDEST DUP2 EQ PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x331 DUP2 PUSH2 0x30B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34D JUMPI PUSH2 0x34C PUSH2 0x1CB JUMP JUMPDEST JUMPDEST PUSH2 0x357 PUSH1 0x80 PUSH2 0x241 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x367 DUP5 DUP3 DUP6 ADD PUSH2 0x273 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x37B DUP5 DUP3 DUP6 ADD PUSH2 0x2B3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x38F DUP5 DUP3 DUP6 ADD PUSH2 0x2EC JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3A3 DUP5 DUP3 DUP6 ADD PUSH2 0x322 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C5 JUMPI PUSH2 0x3C4 PUSH2 0x1C6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D3 DUP5 DUP3 DUP6 ADD PUSH2 0x337 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE BASEFEE 0xDE DUP11 CHAINID PUSH10 0xD3A467980ECC16248E60 SWAP15 0x2C 0x5F EXTCODESIZE 0xF6 0xD1 BLOCKHASH 0xE7 0xC7 PUSH10 0xC906E422282764736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"166:348:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;259:253;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;300:5;317:42;362:4;;;;;;;;;;:13;;;389:66;362:103;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;317:148;;482:17;:23;;;475:30;;;259:253;:::o;7:90:4:-;42:7;85:5;82:1;71:20;60:31;;7:90;;;:::o;103:112::-;186:22;202:5;186:22;:::i;:::-;181:3;174:35;103:112;;:::o;221:214::-;310:4;348:2;337:9;333:18;325:26;;361:67;425:1;414:9;410:17;401:6;361:67;:::i;:::-;221:214;;;;:::o;441:161::-;562:7;591:5;580:16;;441:161;;;:::o;608:77::-;645:7;674:5;663:16;;608:77;;;:::o;691:92::-;723:8;770:5;767:1;763:13;742:34;;691:92;;;:::o;789:314::-;923:9;956:141;974:122;987:108;1089:5;987:108;:::i;:::-;974:122;:::i;:::-;956:141;:::i;:::-;943:154;;789:314;;;:::o;1109:299::-;1280:121;1395:5;1280:121;:::i;:::-;1275:3;1268:134;1109:299;;:::o;1414:390::-;1591:4;1629:2;1618:9;1614:18;1606:26;;1642:155;1794:1;1783:9;1779:17;1770:6;1642:155;:::i;:::-;1414:390;;;;:::o;1810:75::-;1843:6;1876:2;1870:9;1860:19;;1810:75;:::o;1891:117::-;2000:1;1997;1990:12;2137:117;2246:1;2243;2236:12;2260:102;2301:6;2352:2;2348:7;2343:2;2336:5;2332:14;2328:28;2318:38;;2260:102;;;:::o;2368:180::-;2416:77;2413:1;2406:88;2513:4;2510:1;2503:15;2537:4;2534:1;2527:15;2554:281;2637:27;2659:4;2637:27;:::i;:::-;2629:6;2625:40;2767:6;2755:10;2752:22;2731:18;2719:10;2716:34;2713:62;2710:88;;;2778:18;;:::i;:::-;2710:88;2818:10;2814:2;2807:22;2597:238;2554:281;;:::o;2841:129::-;2875:6;2902:20;;:::i;:::-;2892:30;;2931:33;2959:4;2951:6;2931:33;:::i;:::-;2841:129;;;:::o;3099:118::-;3170:22;3186:5;3170:22;:::i;:::-;3163:5;3160:33;3150:61;;3207:1;3204;3197:12;3150:61;3099:118;:::o;3223:139::-;3278:5;3309:6;3303:13;3294:22;;3325:31;3350:5;3325:31;:::i;:::-;3223:139;;;;:::o;3368:101::-;3404:7;3444:18;3437:5;3433:30;3422:41;;3368:101;;;:::o;3475:120::-;3547:23;3564:5;3547:23;:::i;:::-;3540:5;3537:34;3527:62;;3585:1;3582;3575:12;3527:62;3475:120;:::o;3601:141::-;3657:5;3688:6;3682:13;3673:22;;3704:32;3730:5;3704:32;:::i;:::-;3601:141;;;;:::o;3748:90::-;3783:7;3826:5;3823:1;3812:20;3801:31;;3748:90;;;:::o;3844:118::-;3915:22;3931:5;3915:22;:::i;:::-;3908:5;3905:33;3895:61;;3952:1;3949;3942:12;3895:61;3844:118;:::o;3968:139::-;4023:5;4054:6;4048:13;4039:22;;4070:31;4095:5;4070:31;:::i;:::-;3968:139;;;;:::o;4113:77::-;4150:7;4179:5;4168:16;;4113:77;;;:::o;4196:122::-;4269:24;4287:5;4269:24;:::i;:::-;4262:5;4259:35;4249:63;;4308:1;4305;4298:12;4249:63;4196:122;:::o;4324:143::-;4381:5;4412:6;4406:13;4397:22;;4428:33;4455:5;4428:33;:::i;:::-;4324:143;;;;:::o;4505:951::-;4587:5;4631:4;4619:9;4614:3;4610:19;4606:30;4603:117;;;4639:79;;:::i;:::-;4603:117;4738:21;4754:4;4738:21;:::i;:::-;4729:30;;4819:1;4859:58;4913:3;4904:6;4893:9;4889:22;4859:58;:::i;:::-;4852:4;4845:5;4841:16;4834:84;4769:160;4988:2;5029:59;5084:3;5075:6;5064:9;5060:22;5029:59;:::i;:::-;5022:4;5015:5;5011:16;5004:85;4939:161;5159:2;5200:58;5254:3;5245:6;5234:9;5230:22;5200:58;:::i;:::-;5193:4;5186:5;5182:16;5175:84;5110:160;5336:2;5377:60;5433:3;5424:6;5413:9;5409:22;5377:60;:::i;:::-;5370:4;5363:5;5359:16;5352:86;5280:169;4505:951;;;;:::o;5462:396::-;5554:6;5603:3;5591:9;5582:7;5578:23;5574:33;5571:120;;;5610:79;;:::i;:::-;5571:120;5730:1;5755:86;5833:7;5824:6;5813:9;5809:22;5755:86;:::i;:::-;5745:96;;5701:150;5462:396;;;;:::o"},"methodIdentifiers":{"getPrice()":"98d5fdca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pythTest.sol\":\"PythTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4d7cb071e08e81bb8b113a928f4c2d2b3cdf950ad64c6c7003ea3d874163ca77\",\"dweb:/ipfs/QmRbQchPxRTBMHi7WzLb8XnMGzPDQcWhu7i2u5naUsCRoZ\"]},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3\",\"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ\"]},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fb7f4ffe03be7379d3833c5946e38153de26aef4a4da0323a1ec603787de9eb7\",\"dweb:/ipfs/QmW4WkkLPGjDJrLrW4mYfxtFh8e9KAcPhrnNdxPQsfkS6t\"]},\"contracts/pythTest.sol\":{\"keccak256\":\"0x9829715f9d304830a808d49efcb3db71d85b2542fd3cfe2fc3910af831888b6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0ba9cd65e5387a8cb154cf7c99c84a52fbc6ec151d15d7b684bbf138f616703\",\"dweb:/ipfs/QmSyu3ncP1HVUxBBKiHdg3MHxgYBvQgdotU7gm5XodhSN9\"]}},\"version\":1}"}}}}}
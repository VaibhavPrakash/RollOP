/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace Faucet {
  export type ModuleConfigStruct = {
    name: PromiseOrValue<string>;
    enabled: PromiseOrValue<boolean>;
    ttl: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type ModuleConfigStructOutput = [
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & { name: string; enabled: boolean; ttl: BigNumber; amount: BigNumber };

  export type DripParametersStruct = {
    recipient: PromiseOrValue<string>;
    nonce: PromiseOrValue<BytesLike>;
  };

  export type DripParametersStructOutput = [string, string] & {
    recipient: string;
    nonce: string;
  };

  export type AuthParametersStruct = {
    module: PromiseOrValue<string>;
    id: PromiseOrValue<BytesLike>;
    proof: PromiseOrValue<BytesLike>;
  };

  export type AuthParametersStructOutput = [string, string, string] & {
    module: string;
    id: string;
    proof: string;
  };
}

export interface FaucetInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "configure(address,(string,bool,uint256,uint256))": FunctionFragment;
    "drip((address,bytes32),(address,bytes32,bytes))": FunctionFragment;
    "modules(address)": FunctionFragment;
    "nonces(bytes32,bytes32)": FunctionFragment;
    "timeouts(address,bytes32)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN"
      | "configure"
      | "drip"
      | "modules"
      | "nonces"
      | "timeouts"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [PromiseOrValue<string>, Faucet.ModuleConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "drip",
    values: [Faucet.DripParametersStruct, Faucet.AuthParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeouts",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeouts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Drip(string,bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Drip"): EventFragment;
}

export interface DripEventObject {
  authModule: string;
  userId: string;
  amount: BigNumber;
  recipient: string;
}
export type DripEvent = TypedEvent<
  [string, string, BigNumber, string],
  DripEventObject
>;

export type DripEventFilter = TypedEventFilter<DripEvent>;

export interface Faucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    configure(
      _module: PromiseOrValue<string>,
      _config: Faucet.ModuleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drip(
      _params: Faucet.DripParametersStruct,
      _auth: Faucet.AuthParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        name: string;
        enabled: boolean;
        ttl: BigNumber;
        amount: BigNumber;
      }
    >;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timeouts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  configure(
    _module: PromiseOrValue<string>,
    _config: Faucet.ModuleConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drip(
    _params: Faucet.DripParametersStruct,
    _auth: Faucet.AuthParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modules(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      name: string;
      enabled: boolean;
      ttl: BigNumber;
      amount: BigNumber;
    }
  >;

  nonces(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timeouts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    configure(
      _module: PromiseOrValue<string>,
      _config: Faucet.ModuleConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    drip(
      _params: Faucet.DripParametersStruct,
      _auth: Faucet.AuthParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        name: string;
        enabled: boolean;
        ttl: BigNumber;
        amount: BigNumber;
      }
    >;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeouts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Drip(string,bytes32,uint256,address)"(
      authModule?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BytesLike> | null,
      amount?: null,
      recipient?: PromiseOrValue<string> | null
    ): DripEventFilter;
    Drip(
      authModule?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BytesLike> | null,
      amount?: null,
      recipient?: PromiseOrValue<string> | null
    ): DripEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    configure(
      _module: PromiseOrValue<string>,
      _config: Faucet.ModuleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drip(
      _params: Faucet.DripParametersStruct,
      _auth: Faucet.AuthParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeouts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configure(
      _module: PromiseOrValue<string>,
      _config: Faucet.ModuleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drip(
      _params: Faucet.DripParametersStruct,
      _auth: Faucet.AuthParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeouts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

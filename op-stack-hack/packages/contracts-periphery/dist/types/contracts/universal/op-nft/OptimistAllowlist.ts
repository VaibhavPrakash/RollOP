/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface OptimistAllowlistInterface extends utils.Interface {
  functions: {
    "ALLOWLIST_ATTESTOR()": FunctionFragment;
    "ATTESTATION_STATION()": FunctionFragment;
    "COINBASE_QUEST_ATTESTOR()": FunctionFragment;
    "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": FunctionFragment;
    "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": FunctionFragment;
    "OPTIMIST_INVITER()": FunctionFragment;
    "isAllowedToMint(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ALLOWLIST_ATTESTOR"
      | "ATTESTATION_STATION"
      | "COINBASE_QUEST_ATTESTOR"
      | "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY"
      | "OPTIMIST_CAN_MINT_ATTESTATION_KEY"
      | "OPTIMIST_INVITER"
      | "isAllowedToMint"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALLOWLIST_ATTESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTESTATION_STATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COINBASE_QUEST_ATTESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMIST_INVITER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToMint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ALLOWLIST_ATTESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTESTATION_STATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COINBASE_QUEST_ATTESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMIST_INVITER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface OptimistAllowlist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimistAllowlistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<[string]>;

    ATTESTATION_STATION(overrides?: CallOverrides): Promise<[string]>;

    COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<[string]>;

    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<[string]>;

    isAllowedToMint(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

  ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

  COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

  COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
    overrides?: CallOverrides
  ): Promise<string>;

  OPTIMIST_CAN_MINT_ATTESTATION_KEY(overrides?: CallOverrides): Promise<string>;

  OPTIMIST_INVITER(overrides?: CallOverrides): Promise<string>;

  isAllowedToMint(
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

    ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

    COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<string>;

    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<string>;

    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<string>;

    isAllowedToMint(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    ATTESTATION_STATION(overrides?: CallOverrides): Promise<BigNumber>;

    COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedToMint(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ALLOWLIST_ATTESTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ATTESTATION_STATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COINBASE_QUEST_ATTESTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedToMint(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

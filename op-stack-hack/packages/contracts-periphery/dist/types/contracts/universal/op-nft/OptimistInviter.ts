/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OptimistInviter {
  export type ClaimableInviteStruct = {
    issuer: PromiseOrValue<string>;
    nonce: PromiseOrValue<BytesLike>;
  };

  export type ClaimableInviteStructOutput = [string, string] & {
    issuer: string;
    nonce: string;
  };
}

export interface OptimistInviterInterface extends utils.Interface {
  functions: {
    "ATTESTATION_STATION()": FunctionFragment;
    "CAN_INVITE_ATTESTATION_KEY()": FunctionFragment;
    "CLAIMABLE_INVITE_TYPEHASH()": FunctionFragment;
    "EIP712_VERSION()": FunctionFragment;
    "INVITE_GRANTER()": FunctionFragment;
    "MIN_COMMITMENT_PERIOD()": FunctionFragment;
    "claimInvite(address,(address,bytes32),bytes)": FunctionFragment;
    "commitInvite(bytes32)": FunctionFragment;
    "commitmentTimestamps(bytes32)": FunctionFragment;
    "initialize(string)": FunctionFragment;
    "inviteCounts(address)": FunctionFragment;
    "setInviteCounts(address[],uint256)": FunctionFragment;
    "usedNonces(address,bytes32)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ATTESTATION_STATION"
      | "CAN_INVITE_ATTESTATION_KEY"
      | "CLAIMABLE_INVITE_TYPEHASH"
      | "EIP712_VERSION"
      | "INVITE_GRANTER"
      | "MIN_COMMITMENT_PERIOD"
      | "claimInvite"
      | "commitInvite"
      | "commitmentTimestamps"
      | "initialize"
      | "inviteCounts"
      | "setInviteCounts"
      | "usedNonces"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ATTESTATION_STATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_INVITE_ATTESTATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIMABLE_INVITE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVITE_GRANTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_COMMITMENT_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimInvite",
    values: [
      PromiseOrValue<string>,
      OptimistInviter.ClaimableInviteStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitInvite",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentTimestamps",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "inviteCounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteCounts",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNonces",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ATTESTATION_STATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_INVITE_ATTESTATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIMABLE_INVITE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVITE_GRANTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_COMMITMENT_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInvite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitInvite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inviteCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "InviteClaimed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InviteClaimed"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InviteClaimedEventObject {
  issuer: string;
  claimer: string;
}
export type InviteClaimedEvent = TypedEvent<
  [string, string],
  InviteClaimedEventObject
>;

export type InviteClaimedEventFilter = TypedEventFilter<InviteClaimedEvent>;

export interface OptimistInviter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimistInviterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<[string]>;

    CAN_INVITE_ATTESTATION_KEY(overrides?: CallOverrides): Promise<[string]>;

    CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    INVITE_GRANTER(overrides?: CallOverrides): Promise<[string]>;

    MIN_COMMITMENT_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimInvite(
      _claimer: PromiseOrValue<string>,
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitInvite(
      _commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitmentTimestamps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inviteCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setInviteCounts(
      _accounts: PromiseOrValue<string>[],
      _inviteCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

  CAN_INVITE_ATTESTATION_KEY(overrides?: CallOverrides): Promise<string>;

  CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  EIP712_VERSION(overrides?: CallOverrides): Promise<string>;

  INVITE_GRANTER(overrides?: CallOverrides): Promise<string>;

  MIN_COMMITMENT_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  claimInvite(
    _claimer: PromiseOrValue<string>,
    _claimableInvite: OptimistInviter.ClaimableInviteStruct,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitInvite(
    _commitment: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitmentTimestamps(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inviteCounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setInviteCounts(
    _accounts: PromiseOrValue<string>[],
    _inviteCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedNonces(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

    CAN_INVITE_ATTESTATION_KEY(overrides?: CallOverrides): Promise<string>;

    CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<string>;

    INVITE_GRANTER(overrides?: CallOverrides): Promise<string>;

    MIN_COMMITMENT_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    claimInvite(
      _claimer: PromiseOrValue<string>,
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitInvite(
      _commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitmentTimestamps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    inviteCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInviteCounts(
      _accounts: PromiseOrValue<string>[],
      _inviteCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InviteClaimed(address,address)"(
      issuer?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): InviteClaimedEventFilter;
    InviteClaimed(
      issuer?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): InviteClaimedEventFilter;
  };

  estimateGas: {
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<BigNumber>;

    CAN_INVITE_ATTESTATION_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    INVITE_GRANTER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_COMMITMENT_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    claimInvite(
      _claimer: PromiseOrValue<string>,
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitInvite(
      _commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitmentTimestamps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inviteCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInviteCounts(
      _accounts: PromiseOrValue<string>[],
      _inviteCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ATTESTATION_STATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAN_INVITE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CLAIMABLE_INVITE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVITE_GRANTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_COMMITMENT_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimInvite(
      _claimer: PromiseOrValue<string>,
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitInvite(
      _commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitmentTimestamps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inviteCounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInviteCounts(
      _accounts: PromiseOrValue<string>[],
      _inviteCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

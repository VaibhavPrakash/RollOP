/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Drippie {
  export type DripActionStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type DripActionStructOutput = [string, string, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
  };

  export type DripConfigStruct = {
    reentrant: PromiseOrValue<boolean>;
    interval: PromiseOrValue<BigNumberish>;
    dripcheck: PromiseOrValue<string>;
    checkparams: PromiseOrValue<BytesLike>;
    actions: Drippie.DripActionStruct[];
  };

  export type DripConfigStructOutput = [
    boolean,
    BigNumber,
    string,
    string,
    Drippie.DripActionStructOutput[]
  ] & {
    reentrant: boolean;
    interval: BigNumber;
    dripcheck: string;
    checkparams: string;
    actions: Drippie.DripActionStructOutput[];
  };
}

export interface DrippieInterface extends utils.Interface {
  functions: {
    "CALL(address,bytes,uint256)": FunctionFragment;
    "DELEGATECALL(address,bytes)": FunctionFragment;
    "create(string,(bool,uint256,address,bytes,(address,bytes,uint256)[]))": FunctionFragment;
    "drip(string)": FunctionFragment;
    "drips(string)": FunctionFragment;
    "executable(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "status(string,uint8)": FunctionFragment;
    "withdrawERC20(address,address,uint256)": FunctionFragment;
    "withdrawERC20(address,address)": FunctionFragment;
    "withdrawERC721(address,address,uint256)": FunctionFragment;
    "withdrawETH(address,uint256)": FunctionFragment;
    "withdrawETH(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CALL"
      | "DELEGATECALL"
      | "create"
      | "drip"
      | "drips"
      | "executable"
      | "owner"
      | "setOwner"
      | "status"
      | "withdrawERC20(address,address,uint256)"
      | "withdrawERC20(address,address)"
      | "withdrawERC721"
      | "withdrawETH(address,uint256)"
      | "withdrawETH(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALL",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATECALL",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<string>, Drippie.DripConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "drip",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "drips",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "status",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "CALL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATECALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH(address)",
    data: BytesLike
  ): Result;

  events: {
    "DripCreated(string,string,tuple)": EventFragment;
    "DripExecuted(string,string,address,uint256)": EventFragment;
    "DripStatusUpdated(string,string,uint8)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "ReceivedETH(address,uint256)": EventFragment;
    "WithdrewERC20(address,address,address,uint256)": EventFragment;
    "WithdrewERC721(address,address,address,uint256)": EventFragment;
    "WithdrewETH(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DripCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DripExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DripStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewETH"): EventFragment;
}

export interface DripCreatedEventObject {
  nameref: string;
  name: string;
  config: Drippie.DripConfigStructOutput;
}
export type DripCreatedEvent = TypedEvent<
  [string, string, Drippie.DripConfigStructOutput],
  DripCreatedEventObject
>;

export type DripCreatedEventFilter = TypedEventFilter<DripCreatedEvent>;

export interface DripExecutedEventObject {
  nameref: string;
  name: string;
  executor: string;
  timestamp: BigNumber;
}
export type DripExecutedEvent = TypedEvent<
  [string, string, string, BigNumber],
  DripExecutedEventObject
>;

export type DripExecutedEventFilter = TypedEventFilter<DripExecutedEvent>;

export interface DripStatusUpdatedEventObject {
  nameref: string;
  name: string;
  status: number;
}
export type DripStatusUpdatedEvent = TypedEvent<
  [string, string, number],
  DripStatusUpdatedEventObject
>;

export type DripStatusUpdatedEventFilter =
  TypedEventFilter<DripStatusUpdatedEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface ReceivedETHEventObject {
  from: string;
  amount: BigNumber;
}
export type ReceivedETHEvent = TypedEvent<
  [string, BigNumber],
  ReceivedETHEventObject
>;

export type ReceivedETHEventFilter = TypedEventFilter<ReceivedETHEvent>;

export interface WithdrewERC20EventObject {
  withdrawer: string;
  recipient: string;
  asset: string;
  amount: BigNumber;
}
export type WithdrewERC20Event = TypedEvent<
  [string, string, string, BigNumber],
  WithdrewERC20EventObject
>;

export type WithdrewERC20EventFilter = TypedEventFilter<WithdrewERC20Event>;

export interface WithdrewERC721EventObject {
  withdrawer: string;
  recipient: string;
  asset: string;
  id: BigNumber;
}
export type WithdrewERC721Event = TypedEvent<
  [string, string, string, BigNumber],
  WithdrewERC721EventObject
>;

export type WithdrewERC721EventFilter = TypedEventFilter<WithdrewERC721Event>;

export interface WithdrewETHEventObject {
  withdrawer: string;
  recipient: string;
  amount: BigNumber;
}
export type WithdrewETHEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrewETHEventObject
>;

export type WithdrewETHEventFilter = TypedEventFilter<WithdrewETHEvent>;

export interface Drippie extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DrippieInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DELEGATECALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      _name: PromiseOrValue<string>,
      _config: Drippie.DripConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drip(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, Drippie.DripConfigStructOutput, BigNumber, BigNumber] & {
        status: number;
        config: Drippie.DripConfigStructOutput;
        last: BigNumber;
        count: BigNumber;
      }
    >;

    executable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(
      _name: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20(address,address,uint256)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawERC20(address,address)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawETH(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawETH(address)"(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CALL(
    _target: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DELEGATECALL(
    _target: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    _name: PromiseOrValue<string>,
    _config: Drippie.DripConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drip(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drips(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, Drippie.DripConfigStructOutput, BigNumber, BigNumber] & {
      status: number;
      config: Drippie.DripConfigStructOutput;
      last: BigNumber;
      count: BigNumber;
    }
  >;

  executable(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(
    _name: PromiseOrValue<string>,
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20(address,address,uint256)"(
    _asset: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawERC20(address,address)"(
    _asset: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _asset: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawETH(address,uint256)"(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawETH(address)"(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    DELEGATECALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    create(
      _name: PromiseOrValue<string>,
      _config: Drippie.DripConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    drip(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    drips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, Drippie.DripConfigStructOutput, BigNumber, BigNumber] & {
        status: number;
        config: Drippie.DripConfigStructOutput;
        last: BigNumber;
        count: BigNumber;
      }
    >;

    executable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(
      _name: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20(address,address,uint256)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20(address,address)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawETH(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawETH(address)"(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DripCreated(string,string,tuple)"(
      nameref?: PromiseOrValue<string> | null,
      name?: null,
      config?: null
    ): DripCreatedEventFilter;
    DripCreated(
      nameref?: PromiseOrValue<string> | null,
      name?: null,
      config?: null
    ): DripCreatedEventFilter;

    "DripExecuted(string,string,address,uint256)"(
      nameref?: PromiseOrValue<string> | null,
      name?: null,
      executor?: null,
      timestamp?: null
    ): DripExecutedEventFilter;
    DripExecuted(
      nameref?: PromiseOrValue<string> | null,
      name?: null,
      executor?: null,
      timestamp?: null
    ): DripExecutedEventFilter;

    "DripStatusUpdated(string,string,uint8)"(
      nameref?: PromiseOrValue<string> | null,
      name?: null,
      status?: null
    ): DripStatusUpdatedEventFilter;
    DripStatusUpdated(
      nameref?: PromiseOrValue<string> | null,
      name?: null,
      status?: null
    ): DripStatusUpdatedEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "ReceivedETH(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): ReceivedETHEventFilter;
    ReceivedETH(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): ReceivedETHEventFilter;

    "WithdrewERC20(address,address,address,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewERC20EventFilter;
    WithdrewERC20(
      withdrawer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewERC20EventFilter;

    "WithdrewERC721(address,address,address,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      id?: null
    ): WithdrewERC721EventFilter;
    WithdrewERC721(
      withdrawer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      id?: null
    ): WithdrewERC721EventFilter;

    "WithdrewETH(address,address,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewETHEventFilter;
    WithdrewETH(
      withdrawer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewETHEventFilter;
  };

  estimateGas: {
    CALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DELEGATECALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      _name: PromiseOrValue<string>,
      _config: Drippie.DripConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drip(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(
      _name: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20(address,address,uint256)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawERC20(address,address)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawETH(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawETH(address)"(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DELEGATECALL(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _name: PromiseOrValue<string>,
      _config: Drippie.DripConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drip(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(
      _name: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20(address,address,uint256)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawERC20(address,address)"(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _asset: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawETH(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawETH(address)"(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

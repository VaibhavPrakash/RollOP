/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Reverter,
  ReverterInterface,
} from "../../../../contracts/testing/helpers/Reverter";

const _abi = [
  {
    inputs: [],
    name: "doRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060d18061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063afc874d214602d575b600080fd5b60336035565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5265766572746572207265766572746564000000000000000000000000000000604482015260640160405180910390fdfea2646970667358221220ec203cb02c39167fb92644d16c620e626dd37e549717afc0b4a58207e21910e664736f6c63430008100033";

type ReverterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReverterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reverter__factory extends ContractFactory {
  constructor(...args: ReverterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Reverter> {
    return super.deploy(overrides || {}) as Promise<Reverter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Reverter {
    return super.attach(address) as Reverter;
  }
  override connect(signer: Signer): Reverter__factory {
    return super.connect(signer) as Reverter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReverterInterface {
    return new utils.Interface(_abi) as ReverterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverter {
    return new Contract(address, _abi, signerOrProvider) as Reverter;
  }
}
